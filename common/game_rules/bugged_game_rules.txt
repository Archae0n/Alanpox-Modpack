#Tooltips will be generated from these rules when they fail. Use of custom_tooltip is recommended
#There are still multiple hard-coded rules that apply in addition to these.
#If rules here evaluate to true, there might still be other rules that make the action unavailable.
#If a rule here evaluates to false the action will become unavailable

#Checks whether this species is eligible to become rulers through elections
#Root = country
#This = species
can_generate_leader_from_species = {
	is_sapient = yes
	OR = {
		NAND = {
			NOT = { root = { has_technology = "tech_synthetic_leaders" } }
			has_trait = "trait_mechanical"
		}
		has_citizenship_type = { type = citizenship_full country = root }
	}
	NOT = { is_bugged_symbiotic = yes }
}

is_criminal_syndicate_rule = {
	is_megacorp = yes
	has_valid_civic = civic_criminal_heritage
}

can_build_branch_offices = {
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_NOT_MEGACORP
		OR = {
			is_megacorp = yes
			has_civic = civic_galactic_sovereign_megacorp
		}
	}
}

can_support_branch_offices = {
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_NOT_FALLEN_EMPIRES
		NOR = {
			is_country_type = fallen_empire
			is_country_type = awakened_fallen_empire
		}
	}
	custom_tooltip = { #Reminder to remove if I integrate my criminal rework
		fail_text = BRANCH_OFFICE_NOT_ON_MEGACORP_PLANET
		NOR = {
			is_megacorp = yes
			has_civic = civic_galactic_sovereign_megacorp
		}
	}
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_NOT_REGULAR_EMPIRE
		is_gestalt = no
	}
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_NOT_ADVANCED_PRE_FTL
		if = {
			limit = {
				is_primitive = yes
				is_gestalt = no
			}
			OR = {
				has_pre_ftl_age = atomic_age
				has_pre_ftl_age = early_space_age
				capital_scope = {
					space_owner = {
						is_criminal_syndicate = yes
					}
				}
			}
		}
	}
}

can_build_branch_office_on_planet = {
	custom_tooltip = {
		fail_text = requires_recipient_not_fanatic_purifiers
		exists = owner
		owner = {
			OR = {
				is_same_species = root
				NOT = { has_civic = civic_fanatic_purifiers }
			}
		}
	}
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_NO_OBSERVATION_OUTPOST
		if = {
			limit = {
				root = { is_criminal_syndicate = yes }
				owner = { is_primitive = yes }
			}
			has_observation_outpost = yes
			observation_outpost_owner = {
				is_same_value = root
			}
		}
	}
	# custom_tooltip = { #placeholder for criminal rework if I integrate it
	# 	fail_text = BRANCH_OFFICE_NOT_ON_MEGACORP_PLANET # allows criminal corps to build on corps but not normal corps on corps
	# 	OR = {
	# 		root = { is_criminal_syndicate = yes }
	# 		AND = {
	# 			root = { is_criminal_syndicate = yes }
	# 			owner = {
	# 				is_megacorp = yes
	# 			}
	# 		}
	# 		owner = { has_commercial_pact = root is_megacorp = no }
	# 		owner = { is_in_federation_with = root is_megacorp = no }
	# 	}
	# }
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_NOT_COMMERCIAL_PACT
		exists = owner
		OR = {
			root = { is_criminal_syndicate = yes }
			owner = { has_commercial_pact = root }
			owner = { is_in_federation_with = root }
			AND = {
				has_observation_outpost = yes
				observation_outpost = {
					has_modifier = preftl_action_trade_pact
				}
			}

			# allow branch offices in subsidiaries and vice versa (and fellow subjects)
			root = {
				is_subject = yes
				OR = {
					has_authority = auth_corporate
					has_civic = civic_galactic_sovereign_megacorp
				}
				overlord = {
					OR = {
						is_same_value = prevprev.owner
						is_same_value = prevprev.owner.overlord
					}
				}
			}
			owner = {
				is_subject = yes
				overlord = {
					OR = {
						is_same_value = root
						is_same_value = root.overlord
					}
					OR = {
						has_authority = auth_corporate
						has_civic = civic_galactic_sovereign_megacorp
					}
				}
			}
			AND = {
				root = { has_civic = civic_galactic_sovereign_megacorp }
				owner = { is_galactic_community_member = yes }
			}
			AND = {
				root = { has_modifier = imperial_charter }
				owner = { is_galactic_community_member = yes }
			}
		}
	}
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_MEGACORP_OVERLORD
		exists = owner
		# failure message for having a corporate overlord

		if = {
			limit = {
				OR = {
					# Not valid if you aren't a subject.
					root = {
						is_subject = no
					}
					# Or if your overlord isn't a megacorp.
					root = {
						is_subject = yes
						overlord = {
							NOR = {
								has_authority = auth_corporate
								has_civic = civic_galactic_sovereign_megacorp
							}
						}
					}
				}
			}
			always = yes
		}
		else = {
			AND = {
				root = {
					is_subject = yes
					overlord = {
						OR = {
							has_authority = auth_corporate
							has_civic = civic_galactic_sovereign_megacorp
						}
					}
				}
				owner = {
					OR = {
						is_subject = no
						AND = {
							is_subject = yes
							overlord = { NOT = { is_same_value = root.overlord } }
						}
					}
				}
			}
		}
	}
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_CRIMINAL_HERITAGE_HAS_TRUCE
		exists = owner
		OR = {
			root = { is_criminal_syndicate = no }
			owner = {
				NOR = {
					has_truce = root
					is_at_war_with = root
				}
			}
		}
	}
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_CRIMINAL_COOLDOWN
		exists = owner
		OR = {
			root = { is_criminal_syndicate = no }
			AND = {
				root = { is_criminal_syndicate = yes }
				NOT = { has_planet_flag = criminal_branch_closed_cooldown_planet@root }
			}
		}
	}
}

#Root = country
#This = planet
can_terraform_planet = {
	custom_tooltip = {
		fail_text = terraform_fail_no_presapient_protection_or_no_presapients
		NAND = {
			root = { has_policy_flag = pre_sapients_protect }
			any_owned_species = { is_sapient = no }
		}
	}

	# custom_tooltip = {
	# 	fail_text = "requires_actor_not_devouring_swarm_lithoid"
	# 	root = { is_lithoid_devouring_swarm = no }
	# }
	custom_tooltip = {
		fail_text = "legendary_leader_planet_no_terraform"
		exists = root
		this = {
			NOT = { has_planet_flag = legendary_leader_planet }
		}
	}

	custom_tooltip = {
		fail_text = requires_not_relentless_industrialists_situation
		NOT = {
			any_targeting_situation = {
				is_situation_type = relentless_industrialists_situation
			}
		}
	}
}

can_fill_ruler_job = {
	if = {
		limit = {
			exists = owner
			owner = {
				has_origin = origin_necrophage
				has_trait = trait_necrophage
			}
		}
		custom_tooltip = {
			text = RULER_JOB_NECROPHAGE_TRIGGER
			has_trait = trait_necrophage
			is_enslaved = no
			is_being_purged = no
			is_being_assimilated = no
		}
	}
	else = {
		custom_tooltip = RULER_JOB_TRIGGER
		hidden_trigger = {
			NOT = { has_ethic = ethic_gestalt_consciousness }
			exists = owner
			is_enslaved = no
			is_being_purged = no
			is_being_assimilated = no
			NOT = { has_trait = trait_syncretic_proles }
			NOT = { has_trait = trait_bugged_slave_gene } # Bug Branch
			can_think = yes
			OR = {
				NOT = { has_trait = trait_mechanical }
				AND = {
					owner = { has_technology = tech_synthetic_workers }
					owner = { has_policy_flag = ai_full_rights }
				}
			}
			NOT = { has_citizenship_type = { type = citizenship_organic_trophy country = owner } }
			if = {
				limit = {
					divinity_right_to_work_job_check_trigger_exempt = no
				}
				divinity_right_to_work_job_check_trigger_ruler = yes
			}
		}
	}
}

should_count_towards_leader_cap = {
	NOR = {
		leader_class = envoy
		AND = {
			owner = { is_gestalt = yes }
			is_councilor = yes
			# We count all rulers as well
			NOT = { is_ruler = yes }
		}
		has_leader_flag = marauder_merc_leader
		has_leader_flag = hired_admiral_merc_leader
		has_leader_flag = legendary_leader
		AND = {
			has_trait_tier1or2 = { TRAIT = leader_trait_eager }
			has_skill < 4
		}
		#Bug Branch
		AND = {
			has_trait = leader_trait_bugged_highborn
			has_skill > 9
		}
		#Bug Branch
	}
}

# Root = Species
# From = Country
# This = Species
species_has_happiness = {
	NOR = {
		AND = {
			has_trait = trait_machine_unit
			from = { has_authority = auth_machine_intelligence }
			from = {  is_bugged_happy_gestalt = no } #Bug Branch Gestalt Happiness
		}
		AND = {
			has_trait = trait_hive_mind
			from = { is_bugged_happy_gestalt = no } #Bug Branch Gestalt Happiness
		}
		can_think = no
		AND = {
			has_trait = trait_mechanical
			OR = {
				NOT = { exists = from }
				from = { has_authority = auth_machine_intelligence }
				from = { NOT = { has_technology = tech_synthetic_workers } }
				from = { has_policy_flag = ai_outlawed }
			}
		}
		AND = {
			has_trait = trait_cybernetic
			exists = from
			from = {
				OR = {
					AND = {
						has_authority = auth_machine_intelligence
						has_civic = civic_machine_assimilator # Assimilator empire
					}
					AND = {
						has_authority = auth_democratic
						has_country_flag = cyber_collectivist
					}
				}
			}
		}
	}
}