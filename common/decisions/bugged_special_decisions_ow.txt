#################################
# GALACTIC MARKET FUCK YOU JEFF #
#################################

decision_boost_market_nomination = {
	owned_planets_only = yes
	resources = {
		category = decisions
     	cost = {
			trigger = {
				owner = {
					is_bugged_globalism = no
				}
			}
			energy = 2000
			influence = 300
		}
		cost = {
			trigger = {
				owner = {
					is_bugged_globalism = yes
				}
			}
			energy = 2000
			influence = 100
		}
	}

	potential = {
		OR = {
			has_global_flag = ongoing_market_nomination
			has_global_flag = ongoing_market_relocation_nomination
		}
		#from = { has_communications = event_target:50percentcomms } # should include self
		from = { has_country_flag = market_nomination_eligible }
		OR = {
			has_modifier = market_nominee_level_1
			has_modifier = market_nominee_level_2
			has_modifier = market_nominee_level_3
			has_modifier = market_nominee_level_4 # maxed out and boosted once
			has_modifier = market_nominee_level_5 # maxed out and boosted twice
		}
	}

	allow = {
		custom_tooltip = {
			fail_text = max_boosted
			NOT = { has_planet_flag = boosted_twice }
		}
	}

	effect = {
		custom_tooltip = decision_boost_market_nomination_effects
		hidden_effect = {
			# boost counter
			if = {
				limit = { has_planet_flag = boosted_once }
				set_planet_flag = boosted_twice
			}
			else = {
				set_planet_flag = boosted_once
			}
			# boost rating
			if = {
				limit = { has_modifier = market_nominee_level_1 }
				remove_modifier = market_nominee_level_1
				add_modifier = {
					modifier = market_nominee_level_2
					days = -1
				}
			}
			else_if = {
				limit = { has_modifier = market_nominee_level_2 }
				remove_modifier = market_nominee_level_2
				add_modifier = {
					modifier = market_nominee_level_3
					days = -1
				}
			}
			else_if = {
				limit = { has_modifier = market_nominee_level_3 }
				remove_modifier = market_nominee_level_3
				add_modifier = {
					modifier = market_nominee_level_4
					days = -1
				}
			}
			else_if = {
				limit = { has_modifier = market_nominee_level_4 }
				remove_modifier = market_nominee_level_4
				add_modifier = {
					modifier = market_nominee_level_5
					days = -1
				}
			}
			from = {
				change_variable = {
					which = market_rating
					value = 1
				}
			}
		}
	}

	ai_weight = {
		weight = 10
		modifier = {
			factor = 0
			num_pops < 20
		}
		modifier = {
			factor = 1.5
			from = {
				resource_stockpile_compare = {
					resource = energy
					value > 11000
				}
				resource_stockpile_compare = {
					resource = influence
					value > 350
				}
			}
		}
		modifier = {
			factor = 0.8
			from = { is_xenophobe = yes }
		}
		modifier = {
			factor = 2
			from = { is_megacorp = yes }
		}
		modifier = {
			factor = 3
			from = {
				is_bugged_globalism = yes
			}
		}
	}
}

#
# Preserve Expansion #
#
decision_expand_preserves = {
	owned_planets_only = yes
	icon = decision_animal_wildlife

	enactment_time = 1800
	resources = {
		category = decisions
		cost = {
			minerals = 500
		}
	}
	potential = {
		exists = owner
		owner = {
			is_bugged_environmentalist = yes
		}
		has_deposit = d_big_nature_preserve_blocker
		free_district_slots > 0
	}

	effect = {
		custom_tooltip = decision_expand_preserves_short
		hidden_effect = {
			add_deposit = d_big_nature_preserve_blocker
		}
	}
	ai_weight = {
		weight = 0
	}
}

decision_lithoid_swarm_consume_world = {
	icon = decision_burning_settlement
	sound = event_structural_collapse
	
	#enactment_time = 360
	resources = {
		category = decisions
	}
	owned_planets_only = yes
	
	potential = {
		owner = {
			has_valid_civic = civic_bugged_hive_terravore
		}
		can_have_habitable_deposits = yes
		is_capital = no
		NOT = {
			has_planet_flag = being_devoured
		}
	}
	
	effect = {
		custom_tooltip = decision_lithoid_swarm_consume_world_effect_desc
		set_timed_planet_flag = {
			days = 360
			flag = recently_eaten_planet
		}
		hidden_effect = {
			set_planet_flag = colony_event
			set_planet_flag = being_devoured
			add_modifier = {
				modifier = being_devoured_modifier
				days = -1
			}
			export_trigger_value_to_variable = {
				trigger = planet_size
				variable = num_districts_terravore
			}
			export_trigger_value_to_variable = {
				trigger = count_deposits
				parameters = {
					type = d_lithoid_devastation
				}
				variable = num_lithoid_blockers
			}
			if = {
				limit = {
					is_variable_set = num_lithoid_blockers
				}
				subtract_variable = {
					which = num_districts_terravore
					value = num_lithoid_blockers
				}
			}
		}
		owner = {
			start_situation = {
				type = situation_terravore_consume_planet
				target = root
			}
		}
	}
	
	ai_weight = {
		weight = 5
		
		# don't wreck worlds you want to keep
		modifier = {
			factor = 0
			is_lithoid_devouring_swarm_consumption_world = no
		}
	}
}