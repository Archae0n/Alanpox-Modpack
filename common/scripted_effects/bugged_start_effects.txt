generate_start_pops = {
	optimize_memory
	# SECONDARY SPECIES STARTS: add Traits, set living standards, etc.
	if = {
		limit = {
			owner = {
				OR = {
					has_origin = origin_syncretic_evolution
					has_origin = origin_necrophage
					has_valid_civic = civic_machine_servitor
					has_valid_civic = civic_machine_assimilator
					is_bugged_evolutionary_architects = yes #Bug Branch
					is_bugged_slave_race = yes #Bug Branch
				}
			}
		}

		if = { # Machines: Add 'Machine' Trait
			limit = {
				last_created_species = { is_species_class = MACHINE }
			}
			modify_species = {
				species = last_created_species
				add_trait = trait_machine_unit
				add_traits_at_start_of_list = yes
			}
			last_created_species = {
				save_event_target_as = last_created_species
			}
		}

		# Syncretic Evolution & Necrophage: set flag & citizenship type; (Necrophage) spawn prepatent Pops
		if = {
			limit = {
				owner = {
					OR = {
						has_origin = origin_syncretic_evolution
						has_origin = origin_necrophage
                        is_bugged_evolutionary_architects = yes #Bug Branch
						is_bugged_slave_race = yes #Bug Branch
					}
				}
			}

			last_created_species = {
				set_species_flag = syncretic_species@root.owner
				if = {
					limit = {
						prev.owner = {
							has_origin = origin_syncretic_evolution
                            is_bugged_evolutionary_architects = yes #Bug Branch
							is_bugged_slave_race = yes #Bug Branch
						}
					}
					set_citizenship_type = {
						country = root.owner
						type = citizenship_slavery
					}
				}
			}
			if = {
				limit = {
					owner = {
						has_origin = origin_necrophage
						OR = {
							has_valid_civic = civic_fanatic_purifiers
							has_valid_civic = civic_hive_devouring_swarm
							is_gestalt = yes
						}
					}
				}
				while = {
					count = 6
					create_pop = {
						species = last_created_species
						ethos = random
					}
				}
			}
			else_if = {
				limit = {
					owner = {
						has_origin = origin_necrophage
						is_gestalt = yes
					}
				}
				while = {
					count = 9
					create_pop = {
						species = last_created_species
						ethos = random
					}
				}
			}
			else = {
				while = {
					count = 12
					create_pop = {
						species = last_created_species
						ethos = random
					}
				}
			}
		}
		generate_servitor_assmiliator_secondary_pops = yes
	}

	# Mechanist: spawn robot Pops; add Job-specific Traits; spawn Robot Assembly Plant
	if = {
		limit = {
			owner = {
				OR = {
	 				has_origin = origin_mechanists
	 				is_bugged_industrial_mechanization = yes #Bug Branch
	 			}
			}
		}
		owner = {
			create_built_robot_species = yes
		}
		last_created_species = {
			change_species_characteristics = {
				add_trait = trait_auto_mod_robotic
			}
		}
		while = {
			count = 8
			create_pop = {
				species = last_created_species
			}
		}
		add_building = building_robot_assembly_plant
		add_district_and_planet_size_if_needed_effect = {
			district = district_generator
		}
		while = {
			limit = { num_pops < 27 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = { #Bug Branch - Entire IF
		limit = {
			owner = {
				is_bugged_machine_cult = yes
			}
		}
		owner = {
			create_built_robot_species = yes
		}
		last_created_species = {
			change_species_characteristics = {
				add_trait = trait_auto_mod_robotic
			}
		}
		while = {
			count = 4
			create_pop = {
				species = last_created_species
			}
		}
		add_district_and_planet_size_if_needed_effect = {
			district = district_generator
		}
		while = {
			limit = { num_pops < 27 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	# (Non-Purging) Necrophage: add Buildings & Districts
	if = {
		limit = {
			owner = {
				has_origin = origin_necrophage
				NOR = { #purges them instead
					has_civic = civic_fanatic_purifiers
					has_civic = civic_hive_devouring_swarm
				}
			}
		}
		if = {
			limit = {
				owner = { has_valid_civic = civic_agrarian_idyll } # Needs an extra building slot
			}
			add_district_and_planet_size_if_needed_effect = {
				district = district_city
			}
		}

		add_building = building_necrophage_elevation_chamber
	}

	# Necrophage + Devouring Swarm: spawn Buildings
	if = {
		limit = {
			owner = {
				has_origin = origin_necrophage
				has_valid_civic = civic_hive_devouring_swarm #purges them instead
				is_lithoid_empire = no
			}
		}
		add_building = building_spawning_pool
	}
	if = {
		limit = {
			owner = {
				has_origin = origin_necrophage
				has_valid_civic = civic_hive_devouring_swarm
				is_lithoid_empire = yes
			}
		}
		add_district_and_planet_size_if_needed_effect = { district = district_mining }
	}

	# Clone Army: spawn Buildings
	if = {
		limit = {
			owner = {
				has_origin = origin_clone_army
			}
		}
		add_building = building_clone_army_clone_vat
		add_building = building_clone_army_clone_vat
		planet_event = { id = clones.10 days = 1095 random = 720 }
	}

	# MISC: spawn Pops
	if = {
		limit = {
			owner = { is_hive_empire = yes }
		}
		while = {
			limit = { num_pops < 33 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = { has_valid_civic = civic_machine_servitor }
		}
		while = {
			limit = { num_pops < 33 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = { owner = { is_machine_empire = yes } }
		while = {
			limit = { num_pops < 29 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = {
				is_megacorp = yes
				has_reduced_pop_origin = no
			}
		}
		while = {
			limit = { num_pops < 28 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = { has_origin = origin_broken_shackles }
			num_pops < 6
		}

		while = {
			limit = { num_pops < 6 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = {
				is_regular_empire = yes
				has_reduced_pop_origin = no
			}
		}
		while = {
			limit = { num_pops < 28 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = { has_origin = origin_payback }
			num_pops < 18
		}
		while = {
			limit = { num_pops < 18 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = { has_origin = origin_fear_of_the_dark }
		}
		while = {
			count = 20
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = { #homicidal necrophages lose 1/4 of their necrophytes to fleeing
			owner = {
				has_origin = origin_necrophage
				is_homicidal = yes
			}
		}
		while = {
			count = 2
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = { has_origin = origin_default }
		}
		while = {
			count = 4
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = { has_valid_civic = civic_bugged_hive_livestock_farmers }
		}
		while = {
			count = 4
			create_pop = {
				species = last_created_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = {
				is_eager_explorer_empire = yes
			}
		}
		while = {
			count = 10
			random_owned_pop = {
				limit = {
					is_same_species = root.owner.species
				}
				kill_pop = yes
			}
		}
	}

	# Permanent Employment: add Zombie Trait
	if = {
		limit = {
			owner = {
				has_civic = civic_permanent_employment
			}
		}
		while = {
			count = 4
			random_owned_pop = {
				limit = {
					OR = {
						has_job = clerk
						has_job = technician
						has_job = miner
						has_job = farmer
					}
					is_robotic_species = no
				}
				modify_species = {
					species = this
					add_trait = trait_zombie
					add_traits_at_start_of_list = yes
				}
				if = {
					limit = {
						has_trait = trait_syncretic_proles
					}
					modify_species = {
						species = this
						remove_trait = trait_syncretic_proles
					}
				}
			}
		}
	}

	# Cybernetic Creed: add Unique Traits
	if = {
		limit = {
			owner = {
				has_origin = origin_cybernetic_creed
			}
		}
		while = {
			limit = {
				any_owned_pop = {
					is_robotic_species = no
					has_ethic = ethic_spiritualist
					has_cybernetic_creed_trait = no
				}
			}
			random_owned_pop = {
				limit = {
					is_robotic_species = no
					has_ethic = ethic_spiritualist
					has_cybernetic_creed_trait = no
				}
				modify_species = {
					species = this
					add_trait = trait_cyborg_ritualistic_implants
					add_traits_at_start_of_list = yes
				}
			}
		}
		while = {
			limit = {
				any_owned_pop = {
					has_cybernetic_creed_trait = no
					OR = {
						is_pop_category = ruler
						is_pop_category = specialist
					}
				}
			}
			random_owned_pop = {
				limit = {
					has_cybernetic_creed_trait = no
				}
				clear_pop_category = yes
			}
		}
		owner = {
			set_policy = {
				policy = robot_pop_policy
				option = robot_pops_allowed
				cooldown = no
			}
		}
	}

	#Synthetic Fertility
	if = {
		limit = {
			owner = { has_origin = origin_synthetic_fertility }
		}
		while = {
			count = 9
			create_pop = {
				species = owner
			}
		}
	}
}

void_dweller_home_planet_setup = {
	optimize_memory
	set_planet_flag = habitat_level_2
	owner = {
		save_event_target_as = void_dweller_owner
	}
	solar_system = {
		random_system_planet = {
			limit = { has_planet_flag = habitat_1_planet }
			save_event_target_as = habitat_1_planet
		}
		spawn_megastructure = {
			type = "major_orbital"
			planet = event_target:habitat_1_planet
			coords_from = event_target:habitat_1_planet
			owner = event_target:void_dweller_owner
			graphical_culture = event_target:void_dweller_owner
		}
		random_system_planet = {
			limit = { has_planet_flag = habitat_2_planet }
			save_event_target_as = habitat_2_planet
		}
		spawn_megastructure = {
			type = "major_orbital"
			planet = event_target:habitat_2_planet
			coords_from = event_target:habitat_2_planet
			owner = event_target:void_dweller_owner
			graphical_culture = event_target:void_dweller_owner
		}
		random_system_planet = {
			limit = { has_planet_flag = habitat_3_planet }
			save_event_target_as = habitat_3_planet
		}
		spawn_megastructure = {
			type = "major_orbital"
			planet = event_target:habitat_3_planet
			coords_from = event_target:habitat_3_planet
			owner = event_target:void_dweller_owner
			graphical_culture = event_target:void_dweller_owner
		}
		if = {
			limit = {
				event_target:void_dweller_owner = {
					is_lithoid_empire = yes
				}
			}
			random_system_planet = {
				limit = {
					has_deposit = no
				}
				add_deposit = d_minerals_4
				set_planet_flag = mining_planet
			}
		}
		every_system_planet = {
			limit = { has_planet_flag = mining_planet }
			create_mining_station = { owner = event_target:void_dweller_owner }
		}
		# Change starting pre-scripted ideal into inhabitable worlds
		# First pre-sripted is a research system
		closest_system = {
			limit = { has_star_flag = neighbor_t1_first_colony }
			set_star_flag = ideal_habitat_t1
			max_steps = 3
			random_system_planet = {
				limit = {
					is_colonizable = yes
					is_colony = no
					has_planet_flag = prescripted_ideal
				}
				change_pc = pc_frozen
				set_deposit = d_engineering_3
			}
			while = {
				count = 3
				random_system_planet = {
					limit = {
						is_star = no
						is_colonizable = no
						has_deposit = no
						has_anomaly = no
					}
					random_list = {
						5 = { set_deposit = d_physics_1 }
						5 = { set_deposit = d_society_1 }
						5 = { set_deposit = d_engineering_1 }
						1 = { set_deposit = d_physics_2 }
						1 = { set_deposit = d_society_2 }
						1 = { set_deposit = d_engineering_2 }
					}
				}
			}
		}
		# Second pre-sripted is a resource system
		closest_system = {
			limit = { has_star_flag = neighbor_t2_second_colony }
			set_star_flag = ideal_habitat_t2
			max_steps = 6
			random_system_planet = {
				limit = {
					is_colonizable = yes
					is_colony = no
					has_planet_flag = prescripted_ideal
				}
				remove_planet_flag = prescripted_ideal
				change_pc = pc_molten
				set_deposit = d_alloys_3
				add_deposit = d_minerals_4
			}
			while = {
				count = 3
				random_system_planet = {
					limit = {
						is_star = no
						has_deposit = no
						has_anomaly = no
					}
					random_list = {
						5 = { set_deposit = d_minerals_1 }
						5 = { set_deposit = d_energy_1 }
						1 = { set_deposit = d_minerals_2 }
						1 = { set_deposit = d_energy_2 }
					}
				}
			}
		}
	}
	event_target:habitat_1_planet = {
		set_planet_flag = habitat@PREV
	}
	owner = {
		give_starting_resources_effect = yes
		give_technology = {
			tech = tech_habitat_1
			message = no
		}
		add_research_option = tech_habitat_2

		if = {
			limit = {
				OR = {
					AND = {
						is_lithoid_empire = no
						is_mechanical_species = no
					}
					is_catalytic_empire = yes
				}
			}
			give_technology = {
				tech = tech_eco_simulation
				message = no
			}
			give_technology = {
				tech = tech_hydroponics
				message = no
			}
			root.solar_system.starbase = {
				remove_starbase_building = {
					slot = 1
				}
				set_starbase_building = {
					slot = 1
					building = hydroponics_bay
				}
			}
		}
		else = {
			give_technology = {
				tech = tech_powered_exoskeletons
				message = no
			}
			give_technology = {
				tech = tech_space_mining_1
				message = no
			}
		}
		if = {
			limit = {
				has_valid_civic = civic_private_healthcare_corporate
			}
			give_technology = { message = no tech = tech_frontier_health }
			add_research_option = tech_subdermal_stimulation
		}
	}

	if = {
		limit = {
			owner = {
				NOR = {
					is_eager_explorer_empire = yes
					has_valid_civic = civic_machine_servitor
					has_valid_civic = civic_machine_assimilator
				}
			}
		}
		while = {
			count = 28
			create_pop = {
				species = owner_main_species
			}
		}
	}
	else_if = {
		limit = {
			owner = {
				is_eager_explorer_empire = yes
			}
		}
		while = {
			count = 18
			create_pop = {
				species = owner_main_species
			}
		}
	}
	if = { #Bug Branch
		limit = {
			owner = {
				is_bugged_machine_cult = yes
			}
		}
		owner = { create_built_robot_species = yes }
		while = {
			count = 4
			random_owned_pop = {
				limit = {
					is_same_species = root.owner.species
				}
				kill_pop = yes
			}
		}
        last_created_species = {
			change_species_characteristics = {
				add_trait = trait_auto_mod_robotic
			}
		}
		while = {
			count = 4
			create_pop = {
				species = last_created_species
			}
		}
    }
	if = {
		limit = {
			owner = {
				is_bugged_slave_race = yes
			}
		}
		while = {
			count = 4
			random_owned_pop = {
				limit = {
					is_same_species = root.owner.species
				}
				kill_pop = yes
			}
		}
		while = {
			count = 4
			create_pop = {
				species = last_created_species
			}
		}
		last_created_species = {
			set_species_flag = syncretic_species@root.owner
			if = {
				limit = {
					prev.owner = {
						is_bugged_slave_race = yes
					}
				}
				set_citizenship_type = {
					country = root.owner
					type = citizenship_slavery
				}
			}
		}
	}
	if = {
		limit = {
			owner = {
				is_bugged_evolutionary_architects = yes
			}
		}
		while = {
			count = 4
			random_owned_pop = {
				limit = {
					is_same_species = root.owner.species
				}
				kill_pop = yes
			}
		}
		while = {
			count = 4
			create_pop = {
				species = last_created_species
			}
		}
	}
	if = {
		limit = {
			owner = {
				is_bugged_industrial_mechanization = yes

			}
		}
		owner = { create_built_robot_species = yes }
		while = {
			count = 4
			random_owned_pop = {
				limit = {
					is_same_species = root.owner.species
				}
				kill_pop = yes
			}
		}
		while = {
			count = 4
			create_pop = {
				species = last_created_species
			}
		}
		add_building = building_robot_assembly_plant
	}
	else_if = {
		limit = {
			owner = {
				is_eager_explorer_empire = yes
				OR = {
					has_valid_civic = civic_machine_servitor
					has_valid_civic = civic_machine_assimilator
				}
			}
		}
		generate_servitor_assmiliator_secondary_pops = yes
		while = {
			limit = { num_pops < 18 }
			create_pop = {
				species = owner_main_species
			}
		}
	}
	else = {
		generate_servitor_assmiliator_secondary_pops = yes
		while = {
			limit = { num_pops < 28 }
			create_pop = {
				species = owner_main_species
			}
		}
	}
	if = {
		limit = {
			owner = {
				is_hive_empire = yes
			}
		}
		while = {
			count = 5
			create_pop = {
				species = owner_main_species
			}
		}
	}

	if = {
		limit = {
			owner = {
				has_valid_civic = civic_permanent_employment
			}
		}
		while = {
			count = 4
			random_owned_pop = {
				limit = {
					OR = {
						has_job = clerk
						has_job = technician
						has_job = miner
						has_job = farmer
					}
					is_robotic_species = no
				}
				modify_species = {
					species = this
					add_trait = trait_zombie
					add_traits_at_start_of_list = yes
				}
				if = {
					limit = {
						has_trait = trait_syncretic_proles
					}
					modify_species = {
						species = this
						remove_trait = trait_syncretic_proles
					}
				}
			}
		}
	}

	set_planet_entity = {
		entity = "habitat_phase_03_entity"
		graphical_culture = owner
	}
	set_planet_size = 6
	add_deposit = d_arcane_replicator
	while = {
		count = 2
		add_district = {
			district_type = district_hab_housing
			ignore_cap = yes
		}
	}
	add_district = {
		district_type = district_hab_industrial
		ignore_cap = yes
	}
	while = {
		count = 2
		add_district = {
			district_type = district_hab_mining
			ignore_cap = yes
		}
	}
	add_district = {
		district_type = district_hab_energy
		ignore_cap = yes
	}
	add_building = building_hab_major_capital
	if = {
		limit = {
			owner = {
				is_eager_explorer_empire = no
			}
		}
		add_district = {
			district_type = district_hab_science
			ignore_cap = yes
		}
	}
	if = {
		limit = {
			owner = {
				OR = {
					AND = {
						is_lithoid_empire = no
						is_mechanical_species = no
					}
					OR = {
						is_catalytic_empire = yes
						has_country_flag = non_lithoid_subspecies
					}
				}
			}
		}
		add_building = building_hydroponics_farm
	}
	if = {
		limit = {
			owner = {
				is_gestalt = no
			}
		}
		# Unity Building - Admin/Sacrificial Temple/Temple
		if = {
			limit = {
				owner = {
					is_spiritualist = no
				}
			}
			add_building = building_bureaucratic_1
		}
		if = {
			limit = {
				owner = {
					is_spiritualist = yes
					OR = {
						has_valid_civic = civic_death_cult
						has_valid_civic = civic_death_cult_corporate
					}
				}
			}
			add_building = building_sacrificial_temple_1
		}
		if = {
			limit = {
				owner = {
					is_spiritualist = yes
					NOR = {
						is_bugged_cult = yes #Bug Beanch
						has_valid_civic = civic_death_cult
						has_valid_civic = civic_death_cult_corporate
					}
				}
			}
			add_building = building_temple
		}
        #Physics Cults - Bug Branch
		#Gravity Is Crucial
		if = {
			limit = {
				owner = {
					is_spiritualist = yes
					is_bugged_gravity_cult = yes
				}
			}
			add_building = building_bugged_gravity_monastery
		}
		#Luminosity Cult
		if = {
			limit = {
				owner = {
					is_spiritualist = yes
					is_bugged_luminosity_cult = yes
				}
			}
			add_building = building_bugged_light_temple_1
		}
		#Society Cults - Bug Branch
		#Life Cult
		if = {
			limit = {
				owner = {
					is_spiritualist = yes
					is_bugged_life_cult = yes
				}
			}
			add_building = building_bugged_life_monastery
		}
		#Engineering Cults - Bug Branch
		#Machine Cult
		if = {
			limit = {
				owner = {
					is_spiritualist = yes
					is_bugged_machine_cult = yes
				}
			}
			add_building = building_bugged_mecha_monastery
		}
		#War Cult
		if = {
			limit = {
				owner = {
					is_spiritualist = yes
					is_bugged_war_cult = yes
				}
			}
			add_building = building_bugged_war_temple_1
		}

		# Amenity Building - Holo-Theatres/Clinc/Sacrificial Temple/Temple/Commercial Zone
		if = {
			limit = {
				owner = {
					is_spiritualist = no
					has_valid_civic = civic_pleasure_seekers
				}
			}
			add_building = building_holo_theatres
		}
		# Amenity Building - Holo-Theatres/Clinc/Sacrificial Temple/Temple/Commercial Zone
		if = {
			limit = {
				owner = {
					is_spiritualist = no
					is_pleasure_seeker = yes
				}
			}
			add_building = building_holo_theatres
		}
		#Aug Bazaar
		else_if = {
			limit = {
				owner = {
					has_valid_civic = civic_augmentation_bazaars
				}
				free_building_slots > 0
			}
			add_building = building_augmentation_bazaars
		}
		# Pharma State
		else_if = {
			limit = {
				owner = {
					has_valid_civic = civic_private_healthcare_corporate
				}
			}
			add_building = building_clinic
		}
		else_if = {
			limit = {
				owner = {
					is_spiritualist = yes
					OR = {
						has_valid_civic = civic_death_cult
						has_valid_civic = civic_death_cult_corporate
					}
				}
			}
			add_building = building_sacrificial_temple_1
		}
		else_if = {
			limit = {
				owner = {
					is_spiritualist = yes
					is_bugged_basic_cult = yes
				}
			}
			add_building = building_temple
		}
		#Luminosity Cult
		else_if = {
			limit = {
				owner = {
					is_spiritualist = yes
					is_bugged_luminosity_cult = yes
				}
			}
			add_building = building_bugged_light_temple_1
		}
		#Engineering Cults - Bug Branch
		#War Cult
		else_if = {
			limit = {
				owner = {
					is_spiritualist = yes
					is_bugged_war_cult = yes
				}
			}
			add_building = building_bugged_war_temple_1
		}
		else_if = {
			limit = {
				owner = {
					is_megacorp = no
					is_spiritualist = yes
				}
			}
			add_building = building_temple
		}
		else = {
			add_building = building_commercial_zone
		}

		# Permanent Employment
		if = {
			limit = {
				owner = {
					has_valid_civic = civic_permanent_employment
				}
				free_building_slots > 0
			}
			add_building = building_posthumous_employment_center
		}

		# Relentless Industrialists
		if = {
			limit = {
				owner = {
					is_relentless_industrialist_empire = yes
				}
				free_building_slots > 0
			}
			add_building = building_coordinated_fulfillment_center_1
		}
	}
	else_if = {
		limit = {
			owner = {
				is_hive_empire = yes
			}
		}
		add_building = building_hive_node
		add_building = building_spawning_pool
	}
	else = {
		add_building = building_machine_assembly_plant
		if = {
			limit = {
				owner = {
					has_valid_civic = civic_machine_servitor
				}
			}
			add_building = building_organic_sanctuary
		}
		else = {
			add_building = building_uplink_node
		}
	}
}

central_crystal_country_spawn_effect = {
	create_species = {
		name = "NAME_Central_Crystal_Species"
		plural = "NAME_Central_Crystal_Species"
		class = PRE_ART
		portrait = art20
		namelist = "ART4"
		traits = {
			trait = trait_pc_habitat_preference
			trait = trait_void_dweller_1
			trait = trait_intelligent
			trait = trait_docile
		}
		homeworld = this

		effect = {
			save_global_event_target_as = crystalline_empire_species
		}
	}

	create_country = {
		name = "NAME_Central_Crystal_Country"
		type = enclave
		authority = auth_imperial
		civics = {
			civic = civic_imperial_cult
			civic = civic_bugged_spiritual_seekers
			civic = civic_bugged_ornamentarian
		}
		species = last_created_species
		ethos = {
			ethic = "ethic_authoritarian"
			ethic = "ethic_fanatic_pacifist"
			ethic = "ethic_fanatic_spiritualist"
		}
		flag = {
			icon = {
				file = "flag_spherical_5.dds"
				category = spherical
			}
			background = {
				category = "backgrounds"
				file = "00_solid.dds"
			}
			colors ={
				"blue"
				"blue"
				"null"
				"null"
			}
		}

		ignore_initial_colony_error = yes

		effect = {
			create_leader = {
				class = random_ruler
				species = this
				name = random
				skill = 5
				immortal = yes
			}
			set_leader = last_created_leader
		}
	}
	last_created_country = {
		save_global_event_target_as = central_crystal_empire
		set_country_flag = central_crystal_country

		set_graphical_culture = mammalian_01

		set_male_ruler_title = "Commander"
		set_female_ruler_title = "Commander"

		create_fleet = {
			name = "NAME_Central_Crystal_Enclave"
			settings = { spawn_debris = no }
			effect = {
				set_owner = prev
				create_ship = {
					name = random
					design = "NAME_Central_Crystal_Station"
					graphical_culture = prev
				}
				set_location = {
					target = prevprev
					angle = random
					distance = 100
				}
				save_event_target_as = CustomCapital
				prev = {
					set_custom_capital_location = event_target:CustomCapital
				}
			}
		}
	}
	solar_system = {
		save_global_event_target_as = the_outer_gate
	}
}